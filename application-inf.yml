spring:
  profiles:
    include:
      - android
      - redis
  datasource:
    market:
      type: com.alibaba.druid.pool.DruidDataSource
      driver-class-name: com.mysql.cj.jdbc.Driver
      druid:
        initial-size: 5
        #最小连接池数量
        min-idle: 5
        #最大连接池数量 maxIdle已经不再使用
        max-active: 20
        #获取连接时最大等待时间，单位毫秒
        max-wait: 60000
        #申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。
        test-while-idle: true
        #既作为检测的间隔时间又作为testWhileIdel执行的依据
        time-between-eviction-runs-millis: 60000
        #销毁线程时检测当前连接的最后活动时间和当前时间差大于该值时，关闭当前连接
        min-evictable-idle-time-millis: 30000
        #用来检测连接是否有效的sql 必须是一个查询语句
        #mysql中为 select 'x'
        #oracle中为 select 1 from dual
        validation-query: select 'x'
        #申请连接时会执行validationQuery检测连接是否有效,开启会降低性能,默认为true
        test-on-borrow: false
        #归还连接时会执行validationQuery检测连接是否有效,开启会降低性能,默认为true
        test-on-return: false
        #当数据库抛出不可恢复的异常时,抛弃该连接
        #是否缓存preparedStatement,mysql5.5+建议开启
        #spring.datasource.druid.pool-prepared-statements=true
        #当值大于0时poolPreparedStatements会自动修改为true
        max-pool-prepared-statement-per-connection-size: 20
    spider:
      type: com.alibaba.druid.pool.DruidDataSource
      driver-class-name: com.mysql.cj.jdbc.Driver
      druid:
        initial-size: 5
        #最小连接池数量
        min-idle: 5
        #最大连接池数量 maxIdle已经不再使用
        max-active: 20
        #获取连接时最大等待时间，单位毫秒
        max-wait: 60000
        #申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。
        test-while-idle: true
        #既作为检测的间隔时间又作为testWhileIdel执行的依据
        time-between-eviction-runs-millis: 60000
        #销毁线程时检测当前连接的最后活动时间和当前时间差大于该值时，关闭当前连接
        min-evictable-idle-time-millis: 30000
        #用来检测连接是否有效的sql 必须是一个查询语句
        #mysql中为 select 'x'
        #oracle中为 select 1 from dual
        validation-query: select 'x'
        #申请连接时会执行validationQuery检测连接是否有效,开启会降低性能,默认为true
        test-on-borrow: false
        #归还连接时会执行validationQuery检测连接是否有效,开启会降低性能,默认为true
        test-on-return: false
        #当数据库抛出不可恢复的异常时,抛弃该连接
        #是否缓存preparedStatement,mysql5.5+建议开启
        #spring.datasource.druid.pool-prepared-statements=true
        #当值大于0时poolPreparedStatements会自动修改为true
        max-pool-prepared-statement-per-connection-size: 20
    online:
      type: com.alibaba.druid.pool.DruidDataSource
      driver-class-name: com.mysql.cj.jdbc.Driver
      druid:
        initial-size: 5
        #最小连接池数量
        min-idle: 5
        #最大连接池数量 maxIdle已经不再使用
        max-active: 20
        #获取连接时最大等待时间，单位毫秒
        max-wait: 60000
        #申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。
        test-while-idle: true
        #既作为检测的间隔时间又作为testWhileIdel执行的依据
        time-between-eviction-runs-millis: 60000
        #销毁线程时检测当前连接的最后活动时间和当前时间差大于该值时，关闭当前连接
        min-evictable-idle-time-millis: 30000
        #用来检测连接是否有效的sql 必须是一个查询语句
        #mysql中为 select 'x'
        #oracle中为 select 1 from dual
        validation-query: select 'x'
        #申请连接时会执行validationQuery检测连接是否有效,开启会降低性能,默认为true
        test-on-borrow: false
        #归还连接时会执行validationQuery检测连接是否有效,开启会降低性能,默认为true
        test-on-return: false
        #当数据库抛出不可恢复的异常时,抛弃该连接
        #是否缓存preparedStatement,mysql5.5+建议开启
        #spring.datasource.druid.pool-prepared-statements=true
        #当值大于0时poolPreparedStatements会自动修改为true
        max-pool-prepared-statement-per-connection-size: 20
    marketgame:
      type: com.alibaba.druid.pool.DruidDataSource
      driver-class-name: com.mysql.cj.jdbc.Driver
      druid:
        initial-size: 5
        #最小连接池数量
        min-idle: 5
        #最大连接池数量 maxIdle已经不再使用
        max-active: 20
        #获取连接时最大等待时间，单位毫秒
        max-wait: 60000
        #申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。
        test-while-idle: true
        #既作为检测的间隔时间又作为testWhileIdel执行的依据
        time-between-eviction-runs-millis: 60000
        #销毁线程时检测当前连接的最后活动时间和当前时间差大于该值时，关闭当前连接
        min-evictable-idle-time-millis: 30000
        #用来检测连接是否有效的sql 必须是一个查询语句
        #mysql中为 select 'x'
        #oracle中为 select 1 from dual
        validation-query: select 'x'
        #申请连接时会执行validationQuery检测连接是否有效,开启会降低性能,默认为true
        test-on-borrow: false
        #归还连接时会执行validationQuery检测连接是否有效,开启会降低性能,默认为true
        test-on-return: false
        #当数据库抛出不可恢复的异常时,抛弃该连接
        #是否缓存preparedStatement,mysql5.5+建议开启
        #spring.datasource.druid.pool-prepared-statements=true
        #当值大于0时poolPreparedStatements会自动修改为true
        max-pool-prepared-statement-per-connection-size: 20
pagehelper:
  helperDialect: mysql
  reasonable: false
  params: count=countSql
  support-methods-arguments: true
mapper:
  style: normal